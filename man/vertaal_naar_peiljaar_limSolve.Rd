% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vertaal_naar_peiljaar_limSolve.R
\name{vertaal_naar_peiljaar_limSolve}
\alias{vertaal_naar_peiljaar_limSolve}
\title{Functie die indicatoren corrigeert voor grenswijzigingen}
\usage{
vertaal_naar_peiljaar_limSolve(
  df,
  oorspronkelijk_jaar,
  peiljaar,
  type_kolommen = "aantal",
  regionaalniveau = "wijk"
)
}
\arguments{
\item{df}{dataframe met features op wijkniveau op basis van wijkindeling van
1 bepaald jaar (oorspronkelijk_jaar) en peiljaar.}

\item{oorspronkelijk_jaar}{jaar waarin de features in df zijn gegeven}

\item{peiljaar}{jaar waarnaartoe de features moeten worden omgezet}

\item{type_kolommen}{welk type is de kolom, 'aantal' of 'aandeel'?}

\item{regionaalniveau}{op welk regionaalniveau moet de omzetting plaats vinden?
Keuze uit 'wijk' en 'gemeente'.}
}
\value{
dataframe met features op wijkniveau op basis van wijkindeling van
peiljaar
}
\description{
Deze functie corrigeert indicatoren op basis van model.2. Het is
nodig om zelf het type indicator aan te geven ('aandeel' of 'aantal'). Het
wordt geadviseerd gebruik te maken van de generieke wrapper functie
\code{\link{wrapper_vertaal_naar_peiljaar}}. Deze functie is gebasseerd het
oplossen van een stelsel vergelijkingen met behulp van de functie
\code{\link[limSolve]{lsei}}.
}
\examples{
library(grenswijzigen)
library(cbsodataR)
library(dplyr)


# laad de kerncijfers per wijk voor 2017 en 2018
df <- rbind(
  cbs_get_data(
    id="83765NED",
    WijkenEnBuurten = has_substring("WK"),
    select=c("WijkenEnBuurten", "AantalInwoners_5", "k_65JaarOfOuder_12")
  ) \%>\% mutate(
    jaar=2017
  ),
  cbs_get_data(
    id="84286NED",
    WijkenEnBuurten = has_substring("WK"),
    select=c("WijkenEnBuurten", "AantalInwoners_5", "k_65JaarOfOuder_12")
  ) \%>\% mutate(
    jaar=2018
  )
) \%>\% mutate(
  gwb_code=trimws(gsub("^WK", "", WijkenEnBuurten))
) \%>\% select(-WijkenEnBuurten)

# laat de wijken in Wageningen zien (gwb_code begint met 0289)
print(filter(df, grepl("^0289", gwb_code)))
#
#
# Omzetten van de data van 2017 naar 2018
df_omgezet <- vertaal_naar_peiljaar_limSolve(
  df,
  oorspronkelijk_jaar = 2017,
  peiljaar = 2018,
  type_kolommen = "aantal"
)

# laat de omgezette wijken in Wageningen zien
print(filter(df_omgezet, grepl("^0289", gwb_code)))

}
